#!groovy

/*
  Script pipeline para construção do ambiente Citsmart

  Autor: Ivan Santos (contato@ivan.consulting)
  Autor: Otávio Lemos (otavio.lemos@citsmart.com)

  Rancher Keys:
  Environment: <NOME DO ENVIRONMENT>
  Access Key: A548DA390D2002F8B5AD
  Secret Key: HjuzzUvpEzqWqJMK44RQn1AvCfuJ1pCB6sePKqhW
  
  TODO: 

*/

def subDomain
def environmentIp
def environment
def jenkinsUser

node {
  
    stage ('Stack Name/Subdomain Name') {

      def envName = input(
      id: 'subDomain', message: 'Stack/Subdomain name',
      ok: 'OK',
      parameters: [
      [$class: 'TextParameterDefinition', defaultValue: 'citsmart', description: 'Define your subdomain name', name: 'name']
    ])

    subDomain = envName['name']
    }

  stage ('Environment Selection') {

     def envSelection = input id: 'EnvSelection', message: 'Select the environmento you want', ok: 'Select', parameters: [choice(choices: ['AWS-Oregon', 'AWS-SP', 'MATRIX-SP'], description: 'Rancher Environment', name: 'environment')], submitter: 'otavio.lemos'

    environment = envSelection['environment']
    if (environment=='AWS-Oregon'){
        environmentIp=oregon01.citsmartcloud.com
    } elsif (environment=='AWS-SP'){
        environmentIp=aws-sp.citsmartcloud.com
    } elsif (environment=='MATRIX-SP'){
        environmentIp=matrixsp01.citsmartcloud.com
    }


    }


/*
AWS-Oregon Chave awscitsmartcloud.pem
AWS-SP Chave citsmartcosp.pem
MATRIX-SP Chave citsmartcomatrix01.pem

citsmartdb
citsmartdbuser
citsmartdbpassword

 jenkinsUser = env.BUILD_USER_ID
*/


 stage('Create DNS record'){
    
    sh 'ssh -p29022 -i $HOME/citsmartcosp.pem manager.citsmart.com -ladmin "sudo cli53 rrcreate citsmartcloud.com \'${subDomain} 300 CNAME ${environmentIp}\'"'

 }


sh '''
ssh -p29022 -i $HOME/citsmartcosp.pem manager.citsmart.com -ladmin "sudo /backup/createenv.sh '${subDomain}'
'''



/*
 stage ("Adicionando Host Rancher Server") {
      
    // Executar comando SSH dentro da instancia e iniciar rancher-agent
    echo "Executar comando SSH dentro da instancia e iniciar rancher-agent"

    
    docker.withServer('tcp://192.168.0.17:2375') {
      //sh 'docker run '
    }

 }

  stage ("Executar STACK") {
    rocketChat("Criando STACK")    
    docker.withServer('tcp://192.168.0.17:2375') {
       //rancher('up stack') 
    }

 }


 stage ('Verificação Stacks'){
        vrfRancherStack("citsmart")
 }
*/

deleteDir()
}


def rocketChat(msg) {
    rocketSend channel: 'citsmart-env-create', message: "Build: ${env.BUILD_NUMBER}: ${msg}", rawMessage: true
}

def rancherCli(cmd) {
    sh "docker run --rm -i -e CATTLE_URL='http://http://192.168.0.17:8080' -e CATTLE_ACCESS_KEY='CBB404EDF2389806B2C3' -e CATTLE_SECRET_KEY='cff6Xkb1nGt1pLt4aRPKZKRbGNHC6YK4epqhY6hN' hub.docker.planejamento.gov.br/rancher-cli ${cmd}"
}

def rancher(cmd){
    sh "docker run --rm -i -e RANCHER_URL='http://http://192.168.0.17:8080' -e RANCHER_SERVER_URL='http://192.168.0.17:8080' -e RANCHER_ACCESS_KEY=CBB404EDF2389806B2C3 -e RANCHER_SECRET_KEY=cff6Xkb1nGt1pLt4aRPKZKRbGNHC6YK4epqhY6hN rancher/cli ${cmd}"
}


def vrfRancherStack(stack){
    rocketChat("Validando Stack no Rancher DTH:\n" + stack)   
    echo("Verificando STACK: "+ stack )
    
    docker.withServer('tcp://192.168.0.17:2375'){
        def stackHomStatus = sh(returnStdout: true, script: "docker run --rm -i -e RANCHER_URL='http://http://192.168.0.17:8080' -e RANCHER_SERVER_URL='http://192.168.0.17:8080' -e RANCHER_ACCESS_KEY=CBB404EDF2389806B2C3 -e RANCHER_SECRET_KEY=cff6Xkb1nGt1pLt4aRPKZKRbGNHC6YK4epqhY6hN rancher/cli stack ls | grep ${stack} | awk '{print \$3}'").trim()
        echo ('STATUS STACK: ' + stack +': ' + stackHomStatus)
        if (stackHomStatus != 'healthy' ) {
            echo "Inicializando container"
            rocketChat("STACK: "+ stack+ ":DOWN -- INICIANDO ...")
            // Problemas ao executar o UP
            //rancher("up --stack "+${stack})
            rancher("start "+${stack})
        } else {
            echo "STACK Funcional"    
            rocketChat("Stack " + stack + " (Rancher DTH) = OK ")   
        }
    }
}